import re
import urllib2

from annoying.decorators import render_to
from collections import OrderedDict
from distutils.version import StrictVersion
from fack.models import Question, Topic
from itertools import groupby

from django.conf import settings
from django.core import serializers 
from django.core.urlresolvers import reverse
from django.db.models import Max
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404

from .models import UserResource, DeploymentStory, Gallery, Picture
from .forms import DeploymentStoryForm, PictureFormSet

@render_to("ka_lite/faq.html")
def faq(request):
    """Render FAQ generated by django-fack backend (override django-fack styles)"""
    topics = Topic.objects.all()
    context = {}
    for t in topics:
        context[t] = Question.objects.filter(topic=t).active()

    return {"faq": context}


@render_to("ka_lite/map.html")
def map(request):
    """Render map of KA Lite installs"""
    deployments = DeploymentStory.objects.published_display()
    return {
        "deployments": deployments,
        "LOCATIONS_JSONP_URL": settings.LOCATIONS_JSONP_URL,
    }

@render_to("ka_lite/infographic.html")
def infographic(request):
    return {}

@render_to("ka_lite/map_add.html")
def map_add(request):
    """Render a form to add a new KA Lite deployment story."""
    if request.method == "POST":
        deployment_form = DeploymentStoryForm(request.POST)
        photo_formset = PictureFormSet(request.POST, request.FILES)
        if deployment_form.is_valid() and photo_formset.is_valid():

            deployment_form.save()

            gallery = Gallery(title="Gallery for deployment %d in %s" % (deployment_form.instance.id, deployment_form.instance.deployment_country))
            gallery.save()

            deployment_form.instance.photo_gallery = gallery
            deployment_form.save()

            for form in photo_formset:
                form.instance.gallery = gallery
                form.save()

            return HttpResponseRedirect(reverse("map_add_thankyou"))
    else:
        deployment_form = DeploymentStoryForm()
        photo_formset = PictureFormSet(queryset=Picture.objects.none())

    return {
        'deployment_form': deployment_form,
        'photo_formset': photo_formset,
    }

@render_to("ka_lite/user-guides.html")
def user_guides(request):
    """Render list of user resources"""
    general_resources = UserResource.objects.filter(version='')
    versioned_resources = UserResource.objects.exclude(version__exact='')
    user_guides = {}

    # Group by versions
    for version, group in groupby(versioned_resources, lambda x: x.version):
        grouped_items = [g for g in group]
        user_guides[version] = grouped_items

    # Order versions
    ordered_versions = [{version: group} for version, group in sorted(user_guides.items(), reverse=True, key=lambda k: StrictVersion(k[0]))]

    return {
        "general_resources": general_resources,
        "user_guides": ordered_versions,
    }

def get_user_resource(slug):
    return UserResource.objects.get(slug=slug)

def user_guide_detail_embed(request, slug):
    """Render embedded HTML for user resource"""
    try:
        obj = get_user_resource(slug)
    except UserResource.DoesNotExist:
        return HttpResponseRedirect("https://learningequality.org/docs/")
    source = urllib2.urlopen(obj.get_google_embed_url()).read()
    source = re.sub('<a class="(\w+)" href="(http|/)', '<a class="\g<1>" target="_blank" href="\g<2>', source)
    return HttpResponse(source)

@render_to("ka_lite/user-guide-detail.html")
def user_guide_detail(request, slug):
    """Render detail of user resource"""
    try:
        obj = get_user_resource(slug)
    except UserResource.DoesNotExist:
        return HttpResponseRedirect("https://learningequality.org/docs/")
    if not obj.is_google_doc:
        return HttpResponseRedirect(obj.external_url)
    related_resources = UserResource.objects.filter(version=obj.version)
    general_resources = UserResource.objects.filter(version='')
    return {
        "resource": obj,
        "related_resources": related_resources,
        "general_resources": general_resources,
    }